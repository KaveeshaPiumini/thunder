// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package authz

import (
	mock "github.com/stretchr/testify/mock"
)

// NewAuthorizeServiceInterfaceMock creates a new instance of AuthorizeServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorizeServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorizeServiceInterfaceMock {
	mock := &AuthorizeServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthorizeServiceInterfaceMock is an autogenerated mock type for the AuthorizeServiceInterface type
type AuthorizeServiceInterfaceMock struct {
	mock.Mock
}

type AuthorizeServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthorizeServiceInterfaceMock) EXPECT() *AuthorizeServiceInterfaceMock_Expecter {
	return &AuthorizeServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// GetAuthorizationCodeDetails provides a mock function for the type AuthorizeServiceInterfaceMock
func (_mock *AuthorizeServiceInterfaceMock) GetAuthorizationCodeDetails(clientID string, code string) (*AuthorizationCode, error) {
	ret := _mock.Called(clientID, code)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizationCodeDetails")
	}

	var r0 *AuthorizationCode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*AuthorizationCode, error)); ok {
		return returnFunc(clientID, code)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *AuthorizationCode); ok {
		r0 = returnFunc(clientID, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AuthorizationCode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(clientID, code)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthorizeServiceInterfaceMock_GetAuthorizationCodeDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizationCodeDetails'
type AuthorizeServiceInterfaceMock_GetAuthorizationCodeDetails_Call struct {
	*mock.Call
}

// GetAuthorizationCodeDetails is a helper method to define mock.On call
//   - clientID string
//   - code string
func (_e *AuthorizeServiceInterfaceMock_Expecter) GetAuthorizationCodeDetails(clientID interface{}, code interface{}) *AuthorizeServiceInterfaceMock_GetAuthorizationCodeDetails_Call {
	return &AuthorizeServiceInterfaceMock_GetAuthorizationCodeDetails_Call{Call: _e.mock.On("GetAuthorizationCodeDetails", clientID, code)}
}

func (_c *AuthorizeServiceInterfaceMock_GetAuthorizationCodeDetails_Call) Run(run func(clientID string, code string)) *AuthorizeServiceInterfaceMock_GetAuthorizationCodeDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthorizeServiceInterfaceMock_GetAuthorizationCodeDetails_Call) Return(authorizationCode *AuthorizationCode, err error) *AuthorizeServiceInterfaceMock_GetAuthorizationCodeDetails_Call {
	_c.Call.Return(authorizationCode, err)
	return _c
}

func (_c *AuthorizeServiceInterfaceMock_GetAuthorizationCodeDetails_Call) RunAndReturn(run func(clientID string, code string) (*AuthorizationCode, error)) *AuthorizeServiceInterfaceMock_GetAuthorizationCodeDetails_Call {
	_c.Call.Return(run)
	return _c
}

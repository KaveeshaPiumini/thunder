// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package certmock

import (
	"github.com/asgardeo/thunder/internal/cert"
	mock "github.com/stretchr/testify/mock"
)

// newCertificateStoreInterfaceMock creates a new instance of certificateStoreInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newCertificateStoreInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *certificateStoreInterfaceMock {
	mock := &certificateStoreInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// certificateStoreInterfaceMock is an autogenerated mock type for the certificateStoreInterface type
type certificateStoreInterfaceMock struct {
	mock.Mock
}

type certificateStoreInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *certificateStoreInterfaceMock) EXPECT() *certificateStoreInterfaceMock_Expecter {
	return &certificateStoreInterfaceMock_Expecter{mock: &_m.Mock}
}

// CreateCertificate provides a mock function for the type certificateStoreInterfaceMock
func (_mock *certificateStoreInterfaceMock) CreateCertificate(cert1 *cert.Certificate) error {
	ret := _mock.Called(cert1)

	if len(ret) == 0 {
		panic("no return value specified for CreateCertificate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*cert.Certificate) error); ok {
		r0 = returnFunc(cert1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// certificateStoreInterfaceMock_CreateCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCertificate'
type certificateStoreInterfaceMock_CreateCertificate_Call struct {
	*mock.Call
}

// CreateCertificate is a helper method to define mock.On call
//   - cert1 *cert.Certificate
func (_e *certificateStoreInterfaceMock_Expecter) CreateCertificate(cert1 interface{}) *certificateStoreInterfaceMock_CreateCertificate_Call {
	return &certificateStoreInterfaceMock_CreateCertificate_Call{Call: _e.mock.On("CreateCertificate", cert1)}
}

func (_c *certificateStoreInterfaceMock_CreateCertificate_Call) Run(run func(cert1 *cert.Certificate)) *certificateStoreInterfaceMock_CreateCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cert.Certificate
		if args[0] != nil {
			arg0 = args[0].(*cert.Certificate)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *certificateStoreInterfaceMock_CreateCertificate_Call) Return(err error) *certificateStoreInterfaceMock_CreateCertificate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *certificateStoreInterfaceMock_CreateCertificate_Call) RunAndReturn(run func(cert1 *cert.Certificate) error) *certificateStoreInterfaceMock_CreateCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCertificateByID provides a mock function for the type certificateStoreInterfaceMock
func (_mock *certificateStoreInterfaceMock) DeleteCertificateByID(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificateByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// certificateStoreInterfaceMock_DeleteCertificateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCertificateByID'
type certificateStoreInterfaceMock_DeleteCertificateByID_Call struct {
	*mock.Call
}

// DeleteCertificateByID is a helper method to define mock.On call
//   - id string
func (_e *certificateStoreInterfaceMock_Expecter) DeleteCertificateByID(id interface{}) *certificateStoreInterfaceMock_DeleteCertificateByID_Call {
	return &certificateStoreInterfaceMock_DeleteCertificateByID_Call{Call: _e.mock.On("DeleteCertificateByID", id)}
}

func (_c *certificateStoreInterfaceMock_DeleteCertificateByID_Call) Run(run func(id string)) *certificateStoreInterfaceMock_DeleteCertificateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *certificateStoreInterfaceMock_DeleteCertificateByID_Call) Return(err error) *certificateStoreInterfaceMock_DeleteCertificateByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *certificateStoreInterfaceMock_DeleteCertificateByID_Call) RunAndReturn(run func(id string) error) *certificateStoreInterfaceMock_DeleteCertificateByID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCertificateByReference provides a mock function for the type certificateStoreInterfaceMock
func (_mock *certificateStoreInterfaceMock) DeleteCertificateByReference(refType cert.CertificateReferenceType, refID string) error {
	ret := _mock.Called(refType, refID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificateByReference")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(cert.CertificateReferenceType, string) error); ok {
		r0 = returnFunc(refType, refID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// certificateStoreInterfaceMock_DeleteCertificateByReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCertificateByReference'
type certificateStoreInterfaceMock_DeleteCertificateByReference_Call struct {
	*mock.Call
}

// DeleteCertificateByReference is a helper method to define mock.On call
//   - refType cert.CertificateReferenceType
//   - refID string
func (_e *certificateStoreInterfaceMock_Expecter) DeleteCertificateByReference(refType interface{}, refID interface{}) *certificateStoreInterfaceMock_DeleteCertificateByReference_Call {
	return &certificateStoreInterfaceMock_DeleteCertificateByReference_Call{Call: _e.mock.On("DeleteCertificateByReference", refType, refID)}
}

func (_c *certificateStoreInterfaceMock_DeleteCertificateByReference_Call) Run(run func(refType cert.CertificateReferenceType, refID string)) *certificateStoreInterfaceMock_DeleteCertificateByReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 cert.CertificateReferenceType
		if args[0] != nil {
			arg0 = args[0].(cert.CertificateReferenceType)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *certificateStoreInterfaceMock_DeleteCertificateByReference_Call) Return(err error) *certificateStoreInterfaceMock_DeleteCertificateByReference_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *certificateStoreInterfaceMock_DeleteCertificateByReference_Call) RunAndReturn(run func(refType cert.CertificateReferenceType, refID string) error) *certificateStoreInterfaceMock_DeleteCertificateByReference_Call {
	_c.Call.Return(run)
	return _c
}

// GetCertificateByID provides a mock function for the type certificateStoreInterfaceMock
func (_mock *certificateStoreInterfaceMock) GetCertificateByID(id string) (*cert.Certificate, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateByID")
	}

	var r0 *cert.Certificate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*cert.Certificate, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *cert.Certificate); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cert.Certificate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// certificateStoreInterfaceMock_GetCertificateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificateByID'
type certificateStoreInterfaceMock_GetCertificateByID_Call struct {
	*mock.Call
}

// GetCertificateByID is a helper method to define mock.On call
//   - id string
func (_e *certificateStoreInterfaceMock_Expecter) GetCertificateByID(id interface{}) *certificateStoreInterfaceMock_GetCertificateByID_Call {
	return &certificateStoreInterfaceMock_GetCertificateByID_Call{Call: _e.mock.On("GetCertificateByID", id)}
}

func (_c *certificateStoreInterfaceMock_GetCertificateByID_Call) Run(run func(id string)) *certificateStoreInterfaceMock_GetCertificateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *certificateStoreInterfaceMock_GetCertificateByID_Call) Return(certificate *cert.Certificate, err error) *certificateStoreInterfaceMock_GetCertificateByID_Call {
	_c.Call.Return(certificate, err)
	return _c
}

func (_c *certificateStoreInterfaceMock_GetCertificateByID_Call) RunAndReturn(run func(id string) (*cert.Certificate, error)) *certificateStoreInterfaceMock_GetCertificateByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCertificateByReference provides a mock function for the type certificateStoreInterfaceMock
func (_mock *certificateStoreInterfaceMock) GetCertificateByReference(refType cert.CertificateReferenceType, refID string) (*cert.Certificate, error) {
	ret := _mock.Called(refType, refID)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateByReference")
	}

	var r0 *cert.Certificate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(cert.CertificateReferenceType, string) (*cert.Certificate, error)); ok {
		return returnFunc(refType, refID)
	}
	if returnFunc, ok := ret.Get(0).(func(cert.CertificateReferenceType, string) *cert.Certificate); ok {
		r0 = returnFunc(refType, refID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cert.Certificate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(cert.CertificateReferenceType, string) error); ok {
		r1 = returnFunc(refType, refID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// certificateStoreInterfaceMock_GetCertificateByReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificateByReference'
type certificateStoreInterfaceMock_GetCertificateByReference_Call struct {
	*mock.Call
}

// GetCertificateByReference is a helper method to define mock.On call
//   - refType cert.CertificateReferenceType
//   - refID string
func (_e *certificateStoreInterfaceMock_Expecter) GetCertificateByReference(refType interface{}, refID interface{}) *certificateStoreInterfaceMock_GetCertificateByReference_Call {
	return &certificateStoreInterfaceMock_GetCertificateByReference_Call{Call: _e.mock.On("GetCertificateByReference", refType, refID)}
}

func (_c *certificateStoreInterfaceMock_GetCertificateByReference_Call) Run(run func(refType cert.CertificateReferenceType, refID string)) *certificateStoreInterfaceMock_GetCertificateByReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 cert.CertificateReferenceType
		if args[0] != nil {
			arg0 = args[0].(cert.CertificateReferenceType)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *certificateStoreInterfaceMock_GetCertificateByReference_Call) Return(certificate *cert.Certificate, err error) *certificateStoreInterfaceMock_GetCertificateByReference_Call {
	_c.Call.Return(certificate, err)
	return _c
}

func (_c *certificateStoreInterfaceMock_GetCertificateByReference_Call) RunAndReturn(run func(refType cert.CertificateReferenceType, refID string) (*cert.Certificate, error)) *certificateStoreInterfaceMock_GetCertificateByReference_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCertificateByID provides a mock function for the type certificateStoreInterfaceMock
func (_mock *certificateStoreInterfaceMock) UpdateCertificateByID(existingCert *cert.Certificate, updatedCert *cert.Certificate) error {
	ret := _mock.Called(existingCert, updatedCert)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCertificateByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*cert.Certificate, *cert.Certificate) error); ok {
		r0 = returnFunc(existingCert, updatedCert)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// certificateStoreInterfaceMock_UpdateCertificateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCertificateByID'
type certificateStoreInterfaceMock_UpdateCertificateByID_Call struct {
	*mock.Call
}

// UpdateCertificateByID is a helper method to define mock.On call
//   - existingCert *cert.Certificate
//   - updatedCert *cert.Certificate
func (_e *certificateStoreInterfaceMock_Expecter) UpdateCertificateByID(existingCert interface{}, updatedCert interface{}) *certificateStoreInterfaceMock_UpdateCertificateByID_Call {
	return &certificateStoreInterfaceMock_UpdateCertificateByID_Call{Call: _e.mock.On("UpdateCertificateByID", existingCert, updatedCert)}
}

func (_c *certificateStoreInterfaceMock_UpdateCertificateByID_Call) Run(run func(existingCert *cert.Certificate, updatedCert *cert.Certificate)) *certificateStoreInterfaceMock_UpdateCertificateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cert.Certificate
		if args[0] != nil {
			arg0 = args[0].(*cert.Certificate)
		}
		var arg1 *cert.Certificate
		if args[1] != nil {
			arg1 = args[1].(*cert.Certificate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *certificateStoreInterfaceMock_UpdateCertificateByID_Call) Return(err error) *certificateStoreInterfaceMock_UpdateCertificateByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *certificateStoreInterfaceMock_UpdateCertificateByID_Call) RunAndReturn(run func(existingCert *cert.Certificate, updatedCert *cert.Certificate) error) *certificateStoreInterfaceMock_UpdateCertificateByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCertificateByReference provides a mock function for the type certificateStoreInterfaceMock
func (_mock *certificateStoreInterfaceMock) UpdateCertificateByReference(existingCert *cert.Certificate, updatedCert *cert.Certificate) error {
	ret := _mock.Called(existingCert, updatedCert)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCertificateByReference")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*cert.Certificate, *cert.Certificate) error); ok {
		r0 = returnFunc(existingCert, updatedCert)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// certificateStoreInterfaceMock_UpdateCertificateByReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCertificateByReference'
type certificateStoreInterfaceMock_UpdateCertificateByReference_Call struct {
	*mock.Call
}

// UpdateCertificateByReference is a helper method to define mock.On call
//   - existingCert *cert.Certificate
//   - updatedCert *cert.Certificate
func (_e *certificateStoreInterfaceMock_Expecter) UpdateCertificateByReference(existingCert interface{}, updatedCert interface{}) *certificateStoreInterfaceMock_UpdateCertificateByReference_Call {
	return &certificateStoreInterfaceMock_UpdateCertificateByReference_Call{Call: _e.mock.On("UpdateCertificateByReference", existingCert, updatedCert)}
}

func (_c *certificateStoreInterfaceMock_UpdateCertificateByReference_Call) Run(run func(existingCert *cert.Certificate, updatedCert *cert.Certificate)) *certificateStoreInterfaceMock_UpdateCertificateByReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cert.Certificate
		if args[0] != nil {
			arg0 = args[0].(*cert.Certificate)
		}
		var arg1 *cert.Certificate
		if args[1] != nil {
			arg1 = args[1].(*cert.Certificate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *certificateStoreInterfaceMock_UpdateCertificateByReference_Call) Return(err error) *certificateStoreInterfaceMock_UpdateCertificateByReference_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *certificateStoreInterfaceMock_UpdateCertificateByReference_Call) RunAndReturn(run func(existingCert *cert.Certificate, updatedCert *cert.Certificate) error) *certificateStoreInterfaceMock_UpdateCertificateByReference_Call {
	_c.Call.Return(run)
	return _c
}

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package authzmock

import (
	"github.com/asgardeo/thunder/internal/oauth/oauth2/authz"
	mock "github.com/stretchr/testify/mock"
)

// newSessionDataStoreInterfaceMock creates a new instance of sessionDataStoreInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newSessionDataStoreInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *sessionDataStoreInterfaceMock {
	mock := &sessionDataStoreInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// sessionDataStoreInterfaceMock is an autogenerated mock type for the sessionDataStoreInterface type
type sessionDataStoreInterfaceMock struct {
	mock.Mock
}

type sessionDataStoreInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *sessionDataStoreInterfaceMock) EXPECT() *sessionDataStoreInterfaceMock_Expecter {
	return &sessionDataStoreInterfaceMock_Expecter{mock: &_m.Mock}
}

// AddSession provides a mock function for the type sessionDataStoreInterfaceMock
func (_mock *sessionDataStoreInterfaceMock) AddSession(value authz.SessionData) string {
	ret := _mock.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for AddSession")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(authz.SessionData) string); ok {
		r0 = returnFunc(value)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// sessionDataStoreInterfaceMock_AddSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSession'
type sessionDataStoreInterfaceMock_AddSession_Call struct {
	*mock.Call
}

// AddSession is a helper method to define mock.On call
//   - value authz.SessionData
func (_e *sessionDataStoreInterfaceMock_Expecter) AddSession(value interface{}) *sessionDataStoreInterfaceMock_AddSession_Call {
	return &sessionDataStoreInterfaceMock_AddSession_Call{Call: _e.mock.On("AddSession", value)}
}

func (_c *sessionDataStoreInterfaceMock_AddSession_Call) Run(run func(value authz.SessionData)) *sessionDataStoreInterfaceMock_AddSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 authz.SessionData
		if args[0] != nil {
			arg0 = args[0].(authz.SessionData)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *sessionDataStoreInterfaceMock_AddSession_Call) Return(s string) *sessionDataStoreInterfaceMock_AddSession_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *sessionDataStoreInterfaceMock_AddSession_Call) RunAndReturn(run func(value authz.SessionData) string) *sessionDataStoreInterfaceMock_AddSession_Call {
	_c.Call.Return(run)
	return _c
}

// ClearSession provides a mock function for the type sessionDataStoreInterfaceMock
func (_mock *sessionDataStoreInterfaceMock) ClearSession(key string) {
	_mock.Called(key)
	return
}

// sessionDataStoreInterfaceMock_ClearSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearSession'
type sessionDataStoreInterfaceMock_ClearSession_Call struct {
	*mock.Call
}

// ClearSession is a helper method to define mock.On call
//   - key string
func (_e *sessionDataStoreInterfaceMock_Expecter) ClearSession(key interface{}) *sessionDataStoreInterfaceMock_ClearSession_Call {
	return &sessionDataStoreInterfaceMock_ClearSession_Call{Call: _e.mock.On("ClearSession", key)}
}

func (_c *sessionDataStoreInterfaceMock_ClearSession_Call) Run(run func(key string)) *sessionDataStoreInterfaceMock_ClearSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *sessionDataStoreInterfaceMock_ClearSession_Call) Return() *sessionDataStoreInterfaceMock_ClearSession_Call {
	_c.Call.Return()
	return _c
}

func (_c *sessionDataStoreInterfaceMock_ClearSession_Call) RunAndReturn(run func(key string)) *sessionDataStoreInterfaceMock_ClearSession_Call {
	_c.Run(run)
	return _c
}

// ClearSessionStore provides a mock function for the type sessionDataStoreInterfaceMock
func (_mock *sessionDataStoreInterfaceMock) ClearSessionStore() {
	_mock.Called()
	return
}

// sessionDataStoreInterfaceMock_ClearSessionStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearSessionStore'
type sessionDataStoreInterfaceMock_ClearSessionStore_Call struct {
	*mock.Call
}

// ClearSessionStore is a helper method to define mock.On call
func (_e *sessionDataStoreInterfaceMock_Expecter) ClearSessionStore() *sessionDataStoreInterfaceMock_ClearSessionStore_Call {
	return &sessionDataStoreInterfaceMock_ClearSessionStore_Call{Call: _e.mock.On("ClearSessionStore")}
}

func (_c *sessionDataStoreInterfaceMock_ClearSessionStore_Call) Run(run func()) *sessionDataStoreInterfaceMock_ClearSessionStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *sessionDataStoreInterfaceMock_ClearSessionStore_Call) Return() *sessionDataStoreInterfaceMock_ClearSessionStore_Call {
	_c.Call.Return()
	return _c
}

func (_c *sessionDataStoreInterfaceMock_ClearSessionStore_Call) RunAndReturn(run func()) *sessionDataStoreInterfaceMock_ClearSessionStore_Call {
	_c.Run(run)
	return _c
}

// GetSession provides a mock function for the type sessionDataStoreInterfaceMock
func (_mock *sessionDataStoreInterfaceMock) GetSession(key string) (bool, authz.SessionData) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 bool
	var r1 authz.SessionData
	if returnFunc, ok := ret.Get(0).(func(string) (bool, authz.SessionData)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) authz.SessionData); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Get(1).(authz.SessionData)
	}
	return r0, r1
}

// sessionDataStoreInterfaceMock_GetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSession'
type sessionDataStoreInterfaceMock_GetSession_Call struct {
	*mock.Call
}

// GetSession is a helper method to define mock.On call
//   - key string
func (_e *sessionDataStoreInterfaceMock_Expecter) GetSession(key interface{}) *sessionDataStoreInterfaceMock_GetSession_Call {
	return &sessionDataStoreInterfaceMock_GetSession_Call{Call: _e.mock.On("GetSession", key)}
}

func (_c *sessionDataStoreInterfaceMock_GetSession_Call) Run(run func(key string)) *sessionDataStoreInterfaceMock_GetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *sessionDataStoreInterfaceMock_GetSession_Call) Return(b bool, sessionData authz.SessionData) *sessionDataStoreInterfaceMock_GetSession_Call {
	_c.Call.Return(b, sessionData)
	return _c
}

func (_c *sessionDataStoreInterfaceMock_GetSession_Call) RunAndReturn(run func(key string) (bool, authz.SessionData)) *sessionDataStoreInterfaceMock_GetSession_Call {
	_c.Call.Return(run)
	return _c
}

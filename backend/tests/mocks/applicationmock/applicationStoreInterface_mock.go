// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package applicationmock

import (
	"github.com/asgardeo/thunder/internal/application/model"
	mock "github.com/stretchr/testify/mock"
)

// newApplicationStoreInterfaceMock creates a new instance of applicationStoreInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newApplicationStoreInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *applicationStoreInterfaceMock {
	mock := &applicationStoreInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// applicationStoreInterfaceMock is an autogenerated mock type for the applicationStoreInterface type
type applicationStoreInterfaceMock struct {
	mock.Mock
}

type applicationStoreInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *applicationStoreInterfaceMock) EXPECT() *applicationStoreInterfaceMock_Expecter {
	return &applicationStoreInterfaceMock_Expecter{mock: &_m.Mock}
}

// CreateApplication provides a mock function for the type applicationStoreInterfaceMock
func (_mock *applicationStoreInterfaceMock) CreateApplication(app model.ApplicationProcessedDTO) error {
	ret := _mock.Called(app)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(model.ApplicationProcessedDTO) error); ok {
		r0 = returnFunc(app)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// applicationStoreInterfaceMock_CreateApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateApplication'
type applicationStoreInterfaceMock_CreateApplication_Call struct {
	*mock.Call
}

// CreateApplication is a helper method to define mock.On call
//   - app model.ApplicationProcessedDTO
func (_e *applicationStoreInterfaceMock_Expecter) CreateApplication(app interface{}) *applicationStoreInterfaceMock_CreateApplication_Call {
	return &applicationStoreInterfaceMock_CreateApplication_Call{Call: _e.mock.On("CreateApplication", app)}
}

func (_c *applicationStoreInterfaceMock_CreateApplication_Call) Run(run func(app model.ApplicationProcessedDTO)) *applicationStoreInterfaceMock_CreateApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.ApplicationProcessedDTO
		if args[0] != nil {
			arg0 = args[0].(model.ApplicationProcessedDTO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *applicationStoreInterfaceMock_CreateApplication_Call) Return(err error) *applicationStoreInterfaceMock_CreateApplication_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *applicationStoreInterfaceMock_CreateApplication_Call) RunAndReturn(run func(app model.ApplicationProcessedDTO) error) *applicationStoreInterfaceMock_CreateApplication_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApplication provides a mock function for the type applicationStoreInterfaceMock
func (_mock *applicationStoreInterfaceMock) DeleteApplication(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// applicationStoreInterfaceMock_DeleteApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApplication'
type applicationStoreInterfaceMock_DeleteApplication_Call struct {
	*mock.Call
}

// DeleteApplication is a helper method to define mock.On call
//   - id string
func (_e *applicationStoreInterfaceMock_Expecter) DeleteApplication(id interface{}) *applicationStoreInterfaceMock_DeleteApplication_Call {
	return &applicationStoreInterfaceMock_DeleteApplication_Call{Call: _e.mock.On("DeleteApplication", id)}
}

func (_c *applicationStoreInterfaceMock_DeleteApplication_Call) Run(run func(id string)) *applicationStoreInterfaceMock_DeleteApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *applicationStoreInterfaceMock_DeleteApplication_Call) Return(err error) *applicationStoreInterfaceMock_DeleteApplication_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *applicationStoreInterfaceMock_DeleteApplication_Call) RunAndReturn(run func(id string) error) *applicationStoreInterfaceMock_DeleteApplication_Call {
	_c.Call.Return(run)
	return _c
}

// GetApplicationByID provides a mock function for the type applicationStoreInterfaceMock
func (_mock *applicationStoreInterfaceMock) GetApplicationByID(id string) (*model.ApplicationProcessedDTO, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationByID")
	}

	var r0 *model.ApplicationProcessedDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.ApplicationProcessedDTO, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.ApplicationProcessedDTO); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationProcessedDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// applicationStoreInterfaceMock_GetApplicationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplicationByID'
type applicationStoreInterfaceMock_GetApplicationByID_Call struct {
	*mock.Call
}

// GetApplicationByID is a helper method to define mock.On call
//   - id string
func (_e *applicationStoreInterfaceMock_Expecter) GetApplicationByID(id interface{}) *applicationStoreInterfaceMock_GetApplicationByID_Call {
	return &applicationStoreInterfaceMock_GetApplicationByID_Call{Call: _e.mock.On("GetApplicationByID", id)}
}

func (_c *applicationStoreInterfaceMock_GetApplicationByID_Call) Run(run func(id string)) *applicationStoreInterfaceMock_GetApplicationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *applicationStoreInterfaceMock_GetApplicationByID_Call) Return(applicationProcessedDTO *model.ApplicationProcessedDTO, err error) *applicationStoreInterfaceMock_GetApplicationByID_Call {
	_c.Call.Return(applicationProcessedDTO, err)
	return _c
}

func (_c *applicationStoreInterfaceMock_GetApplicationByID_Call) RunAndReturn(run func(id string) (*model.ApplicationProcessedDTO, error)) *applicationStoreInterfaceMock_GetApplicationByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetApplicationByName provides a mock function for the type applicationStoreInterfaceMock
func (_mock *applicationStoreInterfaceMock) GetApplicationByName(name string) (*model.ApplicationProcessedDTO, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationByName")
	}

	var r0 *model.ApplicationProcessedDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.ApplicationProcessedDTO, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.ApplicationProcessedDTO); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationProcessedDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// applicationStoreInterfaceMock_GetApplicationByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplicationByName'
type applicationStoreInterfaceMock_GetApplicationByName_Call struct {
	*mock.Call
}

// GetApplicationByName is a helper method to define mock.On call
//   - name string
func (_e *applicationStoreInterfaceMock_Expecter) GetApplicationByName(name interface{}) *applicationStoreInterfaceMock_GetApplicationByName_Call {
	return &applicationStoreInterfaceMock_GetApplicationByName_Call{Call: _e.mock.On("GetApplicationByName", name)}
}

func (_c *applicationStoreInterfaceMock_GetApplicationByName_Call) Run(run func(name string)) *applicationStoreInterfaceMock_GetApplicationByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *applicationStoreInterfaceMock_GetApplicationByName_Call) Return(applicationProcessedDTO *model.ApplicationProcessedDTO, err error) *applicationStoreInterfaceMock_GetApplicationByName_Call {
	_c.Call.Return(applicationProcessedDTO, err)
	return _c
}

func (_c *applicationStoreInterfaceMock_GetApplicationByName_Call) RunAndReturn(run func(name string) (*model.ApplicationProcessedDTO, error)) *applicationStoreInterfaceMock_GetApplicationByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetApplicationList provides a mock function for the type applicationStoreInterfaceMock
func (_mock *applicationStoreInterfaceMock) GetApplicationList() ([]model.BasicApplicationDTO, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationList")
	}

	var r0 []model.BasicApplicationDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]model.BasicApplicationDTO, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []model.BasicApplicationDTO); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.BasicApplicationDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// applicationStoreInterfaceMock_GetApplicationList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplicationList'
type applicationStoreInterfaceMock_GetApplicationList_Call struct {
	*mock.Call
}

// GetApplicationList is a helper method to define mock.On call
func (_e *applicationStoreInterfaceMock_Expecter) GetApplicationList() *applicationStoreInterfaceMock_GetApplicationList_Call {
	return &applicationStoreInterfaceMock_GetApplicationList_Call{Call: _e.mock.On("GetApplicationList")}
}

func (_c *applicationStoreInterfaceMock_GetApplicationList_Call) Run(run func()) *applicationStoreInterfaceMock_GetApplicationList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *applicationStoreInterfaceMock_GetApplicationList_Call) Return(basicApplicationDTOs []model.BasicApplicationDTO, err error) *applicationStoreInterfaceMock_GetApplicationList_Call {
	_c.Call.Return(basicApplicationDTOs, err)
	return _c
}

func (_c *applicationStoreInterfaceMock_GetApplicationList_Call) RunAndReturn(run func() ([]model.BasicApplicationDTO, error)) *applicationStoreInterfaceMock_GetApplicationList_Call {
	_c.Call.Return(run)
	return _c
}

// GetOAuthApplication provides a mock function for the type applicationStoreInterfaceMock
func (_mock *applicationStoreInterfaceMock) GetOAuthApplication(clientID string) (*model.OAuthAppConfigProcessedDTO, error) {
	ret := _mock.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetOAuthApplication")
	}

	var r0 *model.OAuthAppConfigProcessedDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.OAuthAppConfigProcessedDTO, error)); ok {
		return returnFunc(clientID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.OAuthAppConfigProcessedDTO); ok {
		r0 = returnFunc(clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OAuthAppConfigProcessedDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(clientID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// applicationStoreInterfaceMock_GetOAuthApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOAuthApplication'
type applicationStoreInterfaceMock_GetOAuthApplication_Call struct {
	*mock.Call
}

// GetOAuthApplication is a helper method to define mock.On call
//   - clientID string
func (_e *applicationStoreInterfaceMock_Expecter) GetOAuthApplication(clientID interface{}) *applicationStoreInterfaceMock_GetOAuthApplication_Call {
	return &applicationStoreInterfaceMock_GetOAuthApplication_Call{Call: _e.mock.On("GetOAuthApplication", clientID)}
}

func (_c *applicationStoreInterfaceMock_GetOAuthApplication_Call) Run(run func(clientID string)) *applicationStoreInterfaceMock_GetOAuthApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *applicationStoreInterfaceMock_GetOAuthApplication_Call) Return(oAuthAppConfigProcessedDTO *model.OAuthAppConfigProcessedDTO, err error) *applicationStoreInterfaceMock_GetOAuthApplication_Call {
	_c.Call.Return(oAuthAppConfigProcessedDTO, err)
	return _c
}

func (_c *applicationStoreInterfaceMock_GetOAuthApplication_Call) RunAndReturn(run func(clientID string) (*model.OAuthAppConfigProcessedDTO, error)) *applicationStoreInterfaceMock_GetOAuthApplication_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalApplicationCount provides a mock function for the type applicationStoreInterfaceMock
func (_mock *applicationStoreInterfaceMock) GetTotalApplicationCount() (int, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalApplicationCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (int, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// applicationStoreInterfaceMock_GetTotalApplicationCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalApplicationCount'
type applicationStoreInterfaceMock_GetTotalApplicationCount_Call struct {
	*mock.Call
}

// GetTotalApplicationCount is a helper method to define mock.On call
func (_e *applicationStoreInterfaceMock_Expecter) GetTotalApplicationCount() *applicationStoreInterfaceMock_GetTotalApplicationCount_Call {
	return &applicationStoreInterfaceMock_GetTotalApplicationCount_Call{Call: _e.mock.On("GetTotalApplicationCount")}
}

func (_c *applicationStoreInterfaceMock_GetTotalApplicationCount_Call) Run(run func()) *applicationStoreInterfaceMock_GetTotalApplicationCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *applicationStoreInterfaceMock_GetTotalApplicationCount_Call) Return(n int, err error) *applicationStoreInterfaceMock_GetTotalApplicationCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *applicationStoreInterfaceMock_GetTotalApplicationCount_Call) RunAndReturn(run func() (int, error)) *applicationStoreInterfaceMock_GetTotalApplicationCount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateApplication provides a mock function for the type applicationStoreInterfaceMock
func (_mock *applicationStoreInterfaceMock) UpdateApplication(existingApp *model.ApplicationProcessedDTO, updatedApp *model.ApplicationProcessedDTO) error {
	ret := _mock.Called(existingApp, updatedApp)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplication")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.ApplicationProcessedDTO, *model.ApplicationProcessedDTO) error); ok {
		r0 = returnFunc(existingApp, updatedApp)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// applicationStoreInterfaceMock_UpdateApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateApplication'
type applicationStoreInterfaceMock_UpdateApplication_Call struct {
	*mock.Call
}

// UpdateApplication is a helper method to define mock.On call
//   - existingApp *model.ApplicationProcessedDTO
//   - updatedApp *model.ApplicationProcessedDTO
func (_e *applicationStoreInterfaceMock_Expecter) UpdateApplication(existingApp interface{}, updatedApp interface{}) *applicationStoreInterfaceMock_UpdateApplication_Call {
	return &applicationStoreInterfaceMock_UpdateApplication_Call{Call: _e.mock.On("UpdateApplication", existingApp, updatedApp)}
}

func (_c *applicationStoreInterfaceMock_UpdateApplication_Call) Run(run func(existingApp *model.ApplicationProcessedDTO, updatedApp *model.ApplicationProcessedDTO)) *applicationStoreInterfaceMock_UpdateApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.ApplicationProcessedDTO
		if args[0] != nil {
			arg0 = args[0].(*model.ApplicationProcessedDTO)
		}
		var arg1 *model.ApplicationProcessedDTO
		if args[1] != nil {
			arg1 = args[1].(*model.ApplicationProcessedDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *applicationStoreInterfaceMock_UpdateApplication_Call) Return(err error) *applicationStoreInterfaceMock_UpdateApplication_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *applicationStoreInterfaceMock_UpdateApplication_Call) RunAndReturn(run func(existingApp *model.ApplicationProcessedDTO, updatedApp *model.ApplicationProcessedDTO) error) *applicationStoreInterfaceMock_UpdateApplication_Call {
	_c.Call.Return(run)
	return _c
}

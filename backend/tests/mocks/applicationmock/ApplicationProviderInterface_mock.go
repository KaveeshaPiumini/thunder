// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package applicationmock

import (
	"github.com/asgardeo/thunder/internal/application"
	mock "github.com/stretchr/testify/mock"
)

// NewApplicationProviderInterfaceMock creates a new instance of ApplicationProviderInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplicationProviderInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApplicationProviderInterfaceMock {
	mock := &ApplicationProviderInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ApplicationProviderInterfaceMock is an autogenerated mock type for the ApplicationProviderInterface type
type ApplicationProviderInterfaceMock struct {
	mock.Mock
}

type ApplicationProviderInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ApplicationProviderInterfaceMock) EXPECT() *ApplicationProviderInterfaceMock_Expecter {
	return &ApplicationProviderInterfaceMock_Expecter{mock: &_m.Mock}
}

// GetApplicationService provides a mock function for the type ApplicationProviderInterfaceMock
func (_mock *ApplicationProviderInterfaceMock) GetApplicationService() application.ApplicationServiceInterface {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationService")
	}

	var r0 application.ApplicationServiceInterface
	if returnFunc, ok := ret.Get(0).(func() application.ApplicationServiceInterface); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(application.ApplicationServiceInterface)
		}
	}
	return r0
}

// ApplicationProviderInterfaceMock_GetApplicationService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplicationService'
type ApplicationProviderInterfaceMock_GetApplicationService_Call struct {
	*mock.Call
}

// GetApplicationService is a helper method to define mock.On call
func (_e *ApplicationProviderInterfaceMock_Expecter) GetApplicationService() *ApplicationProviderInterfaceMock_GetApplicationService_Call {
	return &ApplicationProviderInterfaceMock_GetApplicationService_Call{Call: _e.mock.On("GetApplicationService")}
}

func (_c *ApplicationProviderInterfaceMock_GetApplicationService_Call) Run(run func()) *ApplicationProviderInterfaceMock_GetApplicationService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ApplicationProviderInterfaceMock_GetApplicationService_Call) Return(applicationServiceInterface application.ApplicationServiceInterface) *ApplicationProviderInterfaceMock_GetApplicationService_Call {
	_c.Call.Return(applicationServiceInterface)
	return _c
}

func (_c *ApplicationProviderInterfaceMock_GetApplicationService_Call) RunAndReturn(run func() application.ApplicationServiceInterface) *ApplicationProviderInterfaceMock_GetApplicationService_Call {
	_c.Call.Return(run)
	return _c
}
